//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/desplesda/Work/YarnSpinner/YarnSpinner.Compiler/Grammars/YarnSpinnerLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Yarn.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class YarnSpinnerLexer : IndentAwareLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, BLANK_LINE_FOLLOWING_OPTION=3, WS=4, COMMENT=5, NEWLINE=6, 
		HEADER_WHEN=7, HEADER_TITLE=8, ID=9, BODY_START=10, HEADER_DELIMITER=11, 
		HASHTAG=12, HEADER_WHEN_UNKNOWN=13, REST_OF_LINE=14, BODY_WS=15, BODY_END=16, 
		SHORTCUT_ARROW=17, LINE_GROUP_ARROW=18, COMMAND_START=19, EXPRESSION_START=20, 
		ESCAPED_ANY=21, TEXT_ESCAPE=22, TEXT_COMMENT=23, TEXT=24, UNESCAPABLE_CHARACTER=25, 
		TEXT_COMMANDHASHTAG_WS=26, TEXT_COMMANDHASHTAG_COMMENT=27, TEXT_COMMANDHASHTAG_ERROR=28, 
		HASHTAG_WS=29, HASHTAG_TEXT=30, EXPR_WS=31, EXPRESSION_WHEN_ALWAYS=32, 
		KEYWORD_TRUE=33, KEYWORD_FALSE=34, KEYWORD_NULL=35, OPERATOR_ASSIGNMENT=36, 
		OPERATOR_LOGICAL_LESS_THAN_EQUALS=37, OPERATOR_LOGICAL_GREATER_THAN_EQUALS=38, 
		OPERATOR_LOGICAL_EQUALS=39, OPERATOR_LOGICAL_LESS=40, OPERATOR_LOGICAL_GREATER=41, 
		OPERATOR_LOGICAL_NOT_EQUALS=42, OPERATOR_LOGICAL_AND=43, OPERATOR_LOGICAL_OR=44, 
		OPERATOR_LOGICAL_XOR=45, OPERATOR_LOGICAL_NOT=46, OPERATOR_MATHS_ADDITION_EQUALS=47, 
		OPERATOR_MATHS_SUBTRACTION_EQUALS=48, OPERATOR_MATHS_MULTIPLICATION_EQUALS=49, 
		OPERATOR_MATHS_MODULUS_EQUALS=50, OPERATOR_MATHS_DIVISION_EQUALS=51, OPERATOR_MATHS_ADDITION=52, 
		OPERATOR_MATHS_SUBTRACTION=53, OPERATOR_MATHS_MULTIPLICATION=54, OPERATOR_MATHS_DIVISION=55, 
		OPERATOR_MATHS_MODULUS=56, LPAREN=57, RPAREN=58, COMMA=59, EXPRESSION_AS=60, 
		STRING=61, FUNC_ID=62, EXPRESSION_END=63, VAR_ID=64, DOT=65, NUMBER=66, 
		COMMAND_NEWLINE=67, COMMAND_WS=68, COMMAND_IF=69, COMMAND_ELSEIF=70, COMMAND_ELSE=71, 
		COMMAND_SET=72, COMMAND_ENDIF=73, COMMAND_CALL=74, COMMAND_DECLARE=75, 
		COMMAND_JUMP=76, COMMAND_DETOUR=77, COMMAND_RETURN=78, COMMAND_ENUM=79, 
		COMMAND_CASE=80, COMMAND_ENDENUM=81, COMMAND_ONCE=82, COMMAND_ENDONCE=83, 
		COMMAND_LOCAL=84, COMMAND_END=85, COMMAND_TEXT_NEWLINE=86, COMMAND_TEXT=87, 
		COMMAND_ID_WS=88, COMMAND_ID_NEWLINE=89, COMMAND_ID_OR_EXPRESSION_WS=90, 
		TYPE_STRING=91, TYPE_NUMBER=92, TYPE_BOOL=93;
	public const int
		WHITESPACE=2, COMMENTS=3;
	public const int
		HeaderWhenMode=1, HeaderTitleMode=2, HeaderMode=3, BodyMode=4, TextMode=5, 
		TextEscapedMode=6, TextCommandOrHashtagMode=7, HashtagMode=8, ExpressionMode=9, 
		CommandMode=10, CommandTextMode=11, CommandIDMode=12, CommandIDOrExpressionMode=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "WHITESPACE", "COMMENTS"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "HeaderWhenMode", "HeaderTitleMode", "HeaderMode", "BodyMode", 
		"TextMode", "TextEscapedMode", "TextCommandOrHashtagMode", "HashtagMode", 
		"ExpressionMode", "CommandMode", "CommandTextMode", "CommandIDMode", "CommandIDOrExpressionMode"
	};

	public static readonly string[] ruleNames = {
		"WS", "COMMENT", "NEWLINE", "HEADER_WHEN", "HEADER_TITLE", "ID", "IDENTIFIER_HEAD", 
		"IDENTIFIER_CHARACTER", "IDENTIFIER_CHARACTERS", "BODY_START", "HEADER_DELIMITER", 
		"HASHTAG", "HEADER_WHEN_DELIMITER", "HEADER_WHEN_UNKNOWN", "HEADER_TITLE_DELIMITER", 
		"HEADER_TITLE_ID", "HEADER_TITLE_NEWLINE", "REST_OF_LINE", "HEADER_NEWLINE", 
		"BODY_WS", "BODY_NEWLINE", "BODY_COMMENT", "BODY_END", "SHORTCUT_ARROW", 
		"LINE_GROUP_ARROW", "COMMAND_START", "BODY_HASHTAG", "EXPRESSION_START", 
		"ESCAPED_BRACKET_START", "ESCAPED_ANY", "ANY", "TEXT_NEWLINE", "TEXT_ESCAPED_MARKUP_BRACKET", 
		"TEXT_ESCAPE", "TEXT_HASHTAG", "TEXT_EXPRESSION_START", "TEXT_COMMAND_START", 
		"TEXT_COMMENT", "TEXT", "TEXT_FRAG", "TEXT_ESCAPED_CHARACTER", "UNESCAPABLE_CHARACTER", 
		"TEXT_COMMANDHASHTAG_WS", "TEXT_COMMANDHASHTAG_COMMENT", "TEXT_COMMANDHASHTAG_COMMAND_START", 
		"TEXT_COMMANDHASHTAG_HASHTAG", "TEXT_COMMANDHASHTAG_NEWLINE", "TEXT_COMMANDHASHTAG_ERROR", 
		"HASHTAG_WS", "HASHTAG_TAG", "HASHTAG_TEXT", "EXPR_WS", "EXPRESSION_WHEN_ALWAYS", 
		"EXPRESSION_WHEN_ONCE", "EXPRESSION_WHEN_IF", "KEYWORD_TRUE", "KEYWORD_FALSE", 
		"KEYWORD_NULL", "OPERATOR_ASSIGNMENT", "OPERATOR_LOGICAL_LESS_THAN_EQUALS", 
		"OPERATOR_LOGICAL_GREATER_THAN_EQUALS", "OPERATOR_LOGICAL_EQUALS", "OPERATOR_LOGICAL_LESS", 
		"OPERATOR_LOGICAL_GREATER", "OPERATOR_LOGICAL_NOT_EQUALS", "OPERATOR_LOGICAL_AND", 
		"OPERATOR_LOGICAL_OR", "OPERATOR_LOGICAL_XOR", "OPERATOR_LOGICAL_NOT", 
		"OPERATOR_MATHS_ADDITION_EQUALS", "OPERATOR_MATHS_SUBTRACTION_EQUALS", 
		"OPERATOR_MATHS_MULTIPLICATION_EQUALS", "OPERATOR_MATHS_MODULUS_EQUALS", 
		"OPERATOR_MATHS_DIVISION_EQUALS", "OPERATOR_MATHS_ADDITION", "OPERATOR_MATHS_SUBTRACTION", 
		"OPERATOR_MATHS_MULTIPLICATION", "OPERATOR_MATHS_DIVISION", "OPERATOR_MATHS_MODULUS", 
		"LPAREN", "RPAREN", "COMMA", "EXPRESSION_AS", "TYPE_STRING", "TYPE_NUMBER", 
		"TYPE_BOOL", "STRING", "FUNC_ID", "EXPRESSION_END", "EXPRESSION_COMMAND_END", 
		"VAR_ID", "DOT", "NUMBER", "EXPRESSION_NEWLINE", "INT", "DIGIT", "COMMAND_NEWLINE", 
		"COMMAND_WS", "COMMAND_IF", "COMMAND_ELSEIF", "COMMAND_ELSE", "COMMAND_SET", 
		"COMMAND_ENDIF", "COMMAND_CALL", "COMMAND_DECLARE", "COMMAND_JUMP", "COMMAND_DETOUR", 
		"COMMAND_RETURN", "COMMAND_ENUM", "COMMAND_CASE", "COMMAND_ENDENUM", "COMMAND_ONCE", 
		"COMMAND_ENDONCE", "COMMAND_LOCAL", "COMMAND_END", "COMMAND_EXPRESSION_AT_START", 
		"COMMAND_ARBITRARY", "COMMAND_TEXT_NEWLINE", "COMMAND_TEXT_END", "COMMAND_EXPRESSION_START", 
		"COMMAND_TEXT", "COMMAND_ID_WS", "COMMAND_ID_NEWLINE", "COMMAND_ID", "COMMAND_ID_END", 
		"COMMAND_ID_OR_EXPRESSION_WS", "COMMAND_ID_OR_EXPRESSION_ID", "COMMAND_ID_OR_EXPRESSION_START", 
		"COMMAND_ID_OR_EXPRESSION_END"
	};


	public YarnSpinnerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public YarnSpinnerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'when'", "'title'", null, "'---'", 
		null, "'#'", null, null, null, "'==='", "'->'", "'=>'", "'<<'", null, 
		null, null, null, null, null, null, null, null, null, null, null, "'always'", 
		"'true'", "'false'", "'null'", null, null, null, null, null, null, null, 
		null, null, null, null, "'+='", "'-='", "'*='", "'%='", "'/='", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'('", "')'", "','", "'as'", null, null, "'}'", 
		null, "'.'", null, null, null, null, null, "'else'", null, "'endif'", 
		null, null, null, null, "'return'", null, null, "'endenum'", "'once'", 
		"'endonce'", "'local'", null, null, null, null, null, null, "'string'", 
		"'number'", "'bool'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "BLANK_LINE_FOLLOWING_OPTION", "WS", "COMMENT", 
		"NEWLINE", "HEADER_WHEN", "HEADER_TITLE", "ID", "BODY_START", "HEADER_DELIMITER", 
		"HASHTAG", "HEADER_WHEN_UNKNOWN", "REST_OF_LINE", "BODY_WS", "BODY_END", 
		"SHORTCUT_ARROW", "LINE_GROUP_ARROW", "COMMAND_START", "EXPRESSION_START", 
		"ESCAPED_ANY", "TEXT_ESCAPE", "TEXT_COMMENT", "TEXT", "UNESCAPABLE_CHARACTER", 
		"TEXT_COMMANDHASHTAG_WS", "TEXT_COMMANDHASHTAG_COMMENT", "TEXT_COMMANDHASHTAG_ERROR", 
		"HASHTAG_WS", "HASHTAG_TEXT", "EXPR_WS", "EXPRESSION_WHEN_ALWAYS", "KEYWORD_TRUE", 
		"KEYWORD_FALSE", "KEYWORD_NULL", "OPERATOR_ASSIGNMENT", "OPERATOR_LOGICAL_LESS_THAN_EQUALS", 
		"OPERATOR_LOGICAL_GREATER_THAN_EQUALS", "OPERATOR_LOGICAL_EQUALS", "OPERATOR_LOGICAL_LESS", 
		"OPERATOR_LOGICAL_GREATER", "OPERATOR_LOGICAL_NOT_EQUALS", "OPERATOR_LOGICAL_AND", 
		"OPERATOR_LOGICAL_OR", "OPERATOR_LOGICAL_XOR", "OPERATOR_LOGICAL_NOT", 
		"OPERATOR_MATHS_ADDITION_EQUALS", "OPERATOR_MATHS_SUBTRACTION_EQUALS", 
		"OPERATOR_MATHS_MULTIPLICATION_EQUALS", "OPERATOR_MATHS_MODULUS_EQUALS", 
		"OPERATOR_MATHS_DIVISION_EQUALS", "OPERATOR_MATHS_ADDITION", "OPERATOR_MATHS_SUBTRACTION", 
		"OPERATOR_MATHS_MULTIPLICATION", "OPERATOR_MATHS_DIVISION", "OPERATOR_MATHS_MODULUS", 
		"LPAREN", "RPAREN", "COMMA", "EXPRESSION_AS", "STRING", "FUNC_ID", "EXPRESSION_END", 
		"VAR_ID", "DOT", "NUMBER", "COMMAND_NEWLINE", "COMMAND_WS", "COMMAND_IF", 
		"COMMAND_ELSEIF", "COMMAND_ELSE", "COMMAND_SET", "COMMAND_ENDIF", "COMMAND_CALL", 
		"COMMAND_DECLARE", "COMMAND_JUMP", "COMMAND_DETOUR", "COMMAND_RETURN", 
		"COMMAND_ENUM", "COMMAND_CASE", "COMMAND_ENDENUM", "COMMAND_ONCE", "COMMAND_ENDONCE", 
		"COMMAND_LOCAL", "COMMAND_END", "COMMAND_TEXT_NEWLINE", "COMMAND_TEXT", 
		"COMMAND_ID_WS", "COMMAND_ID_NEWLINE", "COMMAND_ID_OR_EXPRESSION_WS", 
		"TYPE_STRING", "TYPE_NUMBER", "TYPE_BOOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YarnSpinnerLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YarnSpinnerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 12 : HEADER_WHEN_DELIMITER_action(_localctx, actionIndex); break;
		case 93 : EXPRESSION_NEWLINE_action(_localctx, actionIndex); break;
		}
	}
	private void HEADER_WHEN_DELIMITER_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: SetInWhenClause(true); break;
		}
	}
	private void EXPRESSION_NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: SetInWhenClause(false); break;
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 52 : return EXPRESSION_WHEN_ALWAYS_sempred(_localctx, predIndex);
		case 53 : return EXPRESSION_WHEN_ONCE_sempred(_localctx, predIndex);
		case 54 : return EXPRESSION_WHEN_IF_sempred(_localctx, predIndex);
		case 93 : return EXPRESSION_NEWLINE_sempred(_localctx, predIndex);
		case 98 : return COMMAND_IF_sempred(_localctx, predIndex);
		case 99 : return COMMAND_ELSEIF_sempred(_localctx, predIndex);
		case 100 : return COMMAND_ELSE_sempred(_localctx, predIndex);
		case 101 : return COMMAND_SET_sempred(_localctx, predIndex);
		case 102 : return COMMAND_ENDIF_sempred(_localctx, predIndex);
		case 103 : return COMMAND_CALL_sempred(_localctx, predIndex);
		case 104 : return COMMAND_DECLARE_sempred(_localctx, predIndex);
		case 105 : return COMMAND_JUMP_sempred(_localctx, predIndex);
		case 106 : return COMMAND_DETOUR_sempred(_localctx, predIndex);
		case 107 : return COMMAND_RETURN_sempred(_localctx, predIndex);
		case 108 : return COMMAND_ENUM_sempred(_localctx, predIndex);
		case 109 : return COMMAND_CASE_sempred(_localctx, predIndex);
		case 110 : return COMMAND_ENDENUM_sempred(_localctx, predIndex);
		case 111 : return COMMAND_ONCE_sempred(_localctx, predIndex);
		case 112 : return COMMAND_ENDONCE_sempred(_localctx, predIndex);
		case 113 : return COMMAND_LOCAL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool EXPRESSION_WHEN_ALWAYS_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return IsInWhenClause();;
		}
		return true;
	}
	private bool EXPRESSION_WHEN_ONCE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return IsInWhenClause();;
		}
		return true;
	}
	private bool EXPRESSION_WHEN_IF_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return IsInWhenClause();;
		}
		return true;
	}
	private bool EXPRESSION_NEWLINE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return IsInWhenClause();;
		}
		return true;
	}
	private bool COMMAND_IF_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_ELSEIF_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_ELSE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_SET_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_ENDIF_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_CALL_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_DECLARE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_JUMP_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_DETOUR_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_RETURN_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_ENUM_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_CASE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_ENDENUM_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_ONCE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_ENDONCE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return IsEndOfCommandKeyword();
		}
		return true;
	}
	private bool COMMAND_LOCAL_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return IsEndOfCommandKeyword();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,0,93,1012,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,
		6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		1,0,4,0,274,8,0,11,0,12,0,275,1,0,1,0,1,1,1,1,1,1,1,1,5,1,284,8,1,10,1,
		12,1,287,9,1,1,1,1,1,1,2,3,2,292,8,2,1,2,1,2,3,2,296,8,2,1,2,5,2,299,8,
		2,10,2,12,2,302,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,5,1,5,3,5,323,8,5,1,6,3,6,326,8,6,1,7,1,7,3,7,330,
		8,7,1,8,4,8,333,8,8,11,8,12,8,334,1,9,1,9,1,9,1,9,1,9,1,9,1,10,3,10,344,
		8,10,1,10,1,10,3,10,348,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,3,12,357,
		8,12,1,12,1,12,3,12,361,8,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
		13,1,14,3,14,373,8,14,1,14,1,14,3,14,377,8,14,1,14,1,14,1,15,3,15,382,
		8,15,1,15,1,15,3,15,386,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,4,
		17,396,8,17,11,17,12,17,397,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,
		19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,
		22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
		25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,
		28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
		30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,474,8,32,1,32,1,32,
		1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
		1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,
		4,38,506,8,38,11,38,12,38,507,1,38,3,38,511,8,38,1,39,1,39,1,40,1,40,1,
		40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,
		43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,
		46,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,4,
		50,559,8,50,11,50,12,50,560,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,
		52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
		53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,
		56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,3,
		58,613,8,58,1,59,1,59,1,59,1,59,1,59,3,59,620,8,59,1,60,1,60,1,60,1,60,
		1,60,3,60,627,8,60,1,61,1,61,1,61,1,61,1,61,1,61,3,61,635,8,61,1,62,1,
		62,1,62,3,62,640,8,62,1,63,1,63,1,63,3,63,645,8,63,1,64,1,64,1,64,1,64,
		1,64,3,64,652,8,64,1,65,1,65,1,65,1,65,1,65,3,65,659,8,65,1,66,1,66,1,
		66,1,66,3,66,665,8,66,1,67,1,67,1,67,1,67,3,67,671,8,67,1,68,1,68,1,68,
		1,68,3,68,677,8,68,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,1,72,1,
		72,1,72,1,73,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,
		78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,
		83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
		85,1,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,5,86,742,8,86,10,
		86,12,86,745,9,86,1,86,1,86,1,87,1,87,1,88,1,88,1,88,1,88,1,89,1,89,1,
		89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,91,1,91,1,92,1,92,1,92,1,92,1,
		92,3,92,772,8,92,1,93,4,93,775,8,93,11,93,12,93,776,1,93,1,93,1,93,1,93,
		1,93,1,93,1,94,4,94,786,8,94,11,94,12,94,787,1,95,1,95,1,96,1,96,1,97,
		1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,
		1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,
		1,100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,102,1,102,1,102,
		1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
		1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
		1,104,1,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,106,
		1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,107,1,107,
		1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,
		1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
		1,109,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,111,
		1,111,1,111,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,112,1,112,1,112,
		1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
		1,114,1,114,1,114,1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,115,1,116,
		1,116,1,116,1,116,1,116,1,117,1,117,1,118,1,118,1,118,1,118,1,118,1,118,
		1,119,1,119,1,119,1,119,1,119,1,120,4,120,972,8,120,11,120,12,120,973,
		1,121,1,121,1,121,1,121,1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,124,
		1,124,1,124,1,124,1,124,1,124,1,125,1,125,1,125,1,125,1,126,1,126,1,126,
		1,126,1,126,1,127,1,127,1,127,1,127,1,127,1,128,1,128,1,128,1,128,1,128,
		1,128,0,0,129,14,4,16,5,18,6,20,7,22,8,24,9,26,0,28,0,30,0,32,10,34,11,
		36,12,38,0,40,13,42,0,44,0,46,0,48,14,50,0,52,15,54,0,56,0,58,16,60,17,
		62,18,64,19,66,0,68,20,70,0,72,21,74,0,76,0,78,0,80,22,82,0,84,0,86,0,
		88,23,90,24,92,0,94,0,96,25,98,26,100,27,102,0,104,0,106,0,108,28,110,
		29,112,0,114,30,116,31,118,32,120,0,122,0,124,33,126,34,128,35,130,36,
		132,37,134,38,136,39,138,40,140,41,142,42,144,43,146,44,148,45,150,46,
		152,47,154,48,156,49,158,50,160,51,162,52,164,53,166,54,168,55,170,56,
		172,57,174,58,176,59,178,60,180,91,182,92,184,93,186,61,188,62,190,63,
		192,0,194,64,196,65,198,66,200,0,202,0,204,0,206,67,208,68,210,69,212,
		70,214,71,216,72,218,73,220,74,222,75,224,76,226,77,228,78,230,79,232,
		80,234,81,236,82,238,83,240,84,242,85,244,0,246,0,248,86,250,0,252,0,254,
		87,256,88,258,89,260,0,262,0,264,90,266,0,268,0,270,0,14,0,1,2,3,4,5,6,
		7,8,9,10,11,12,13,12,2,0,9,9,32,32,2,0,10,10,13,13,49,0,65,90,95,95,97,
		122,168,168,170,170,173,173,175,175,178,181,183,186,188,190,192,214,216,
		246,248,767,880,5759,5761,6157,6159,7615,7680,8191,8203,8205,8234,8238,
		8255,8256,8276,8276,8288,8399,8448,8591,9312,9471,10102,10131,11264,11775,
		11904,12287,12292,12295,12321,12335,12337,55295,63744,64829,64832,64975,
		65008,65055,65072,65092,65095,65533,65536,131069,131072,196605,196608,
		262141,262144,327677,327680,393213,393216,458749,458752,524285,524288,
		589821,589824,655357,655360,720893,720896,786429,786432,851965,851968,
		917501,917504,983037,5,0,48,57,768,879,7616,7679,8400,8447,65056,65071,
		2,0,47,47,60,60,7,0,10,10,13,13,35,35,47,47,60,60,92,92,123,123,7,0,35,
		35,47,47,60,60,62,62,92,92,123,123,125,125,5,0,9,10,13,13,32,32,35,36,
		60,60,4,0,10,10,13,13,34,34,92,92,2,0,34,34,92,92,1,0,48,57,4,0,10,10,
		13,13,62,62,123,123,1031,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,
		0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,
		1,38,1,0,0,0,1,40,1,0,0,0,2,42,1,0,0,0,2,44,1,0,0,0,2,46,1,0,0,0,3,48,
		1,0,0,0,3,50,1,0,0,0,4,52,1,0,0,0,4,54,1,0,0,0,4,56,1,0,0,0,4,58,1,0,0,
		0,4,60,1,0,0,0,4,62,1,0,0,0,4,64,1,0,0,0,4,66,1,0,0,0,4,68,1,0,0,0,4,70,
		1,0,0,0,4,72,1,0,0,0,4,74,1,0,0,0,5,76,1,0,0,0,5,78,1,0,0,0,5,80,1,0,0,
		0,5,82,1,0,0,0,5,84,1,0,0,0,5,86,1,0,0,0,5,88,1,0,0,0,5,90,1,0,0,0,6,94,
		1,0,0,0,6,96,1,0,0,0,7,98,1,0,0,0,7,100,1,0,0,0,7,102,1,0,0,0,7,104,1,
		0,0,0,7,106,1,0,0,0,7,108,1,0,0,0,8,110,1,0,0,0,8,112,1,0,0,0,8,114,1,
		0,0,0,9,116,1,0,0,0,9,118,1,0,0,0,9,120,1,0,0,0,9,122,1,0,0,0,9,124,1,
		0,0,0,9,126,1,0,0,0,9,128,1,0,0,0,9,130,1,0,0,0,9,132,1,0,0,0,9,134,1,
		0,0,0,9,136,1,0,0,0,9,138,1,0,0,0,9,140,1,0,0,0,9,142,1,0,0,0,9,144,1,
		0,0,0,9,146,1,0,0,0,9,148,1,0,0,0,9,150,1,0,0,0,9,152,1,0,0,0,9,154,1,
		0,0,0,9,156,1,0,0,0,9,158,1,0,0,0,9,160,1,0,0,0,9,162,1,0,0,0,9,164,1,
		0,0,0,9,166,1,0,0,0,9,168,1,0,0,0,9,170,1,0,0,0,9,172,1,0,0,0,9,174,1,
		0,0,0,9,176,1,0,0,0,9,178,1,0,0,0,9,180,1,0,0,0,9,182,1,0,0,0,9,184,1,
		0,0,0,9,186,1,0,0,0,9,188,1,0,0,0,9,190,1,0,0,0,9,192,1,0,0,0,9,194,1,
		0,0,0,9,196,1,0,0,0,9,198,1,0,0,0,9,200,1,0,0,0,10,206,1,0,0,0,10,208,
		1,0,0,0,10,210,1,0,0,0,10,212,1,0,0,0,10,214,1,0,0,0,10,216,1,0,0,0,10,
		218,1,0,0,0,10,220,1,0,0,0,10,222,1,0,0,0,10,224,1,0,0,0,10,226,1,0,0,
		0,10,228,1,0,0,0,10,230,1,0,0,0,10,232,1,0,0,0,10,234,1,0,0,0,10,236,1,
		0,0,0,10,238,1,0,0,0,10,240,1,0,0,0,10,242,1,0,0,0,10,244,1,0,0,0,10,246,
		1,0,0,0,11,248,1,0,0,0,11,250,1,0,0,0,11,252,1,0,0,0,11,254,1,0,0,0,12,
		256,1,0,0,0,12,258,1,0,0,0,12,260,1,0,0,0,12,262,1,0,0,0,13,264,1,0,0,
		0,13,266,1,0,0,0,13,268,1,0,0,0,13,270,1,0,0,0,14,273,1,0,0,0,16,279,1,
		0,0,0,18,295,1,0,0,0,20,305,1,0,0,0,22,312,1,0,0,0,24,320,1,0,0,0,26,325,
		1,0,0,0,28,329,1,0,0,0,30,332,1,0,0,0,32,336,1,0,0,0,34,343,1,0,0,0,36,
		351,1,0,0,0,38,356,1,0,0,0,40,367,1,0,0,0,42,372,1,0,0,0,44,381,1,0,0,
		0,46,389,1,0,0,0,48,395,1,0,0,0,50,399,1,0,0,0,52,405,1,0,0,0,54,409,1,
		0,0,0,56,414,1,0,0,0,58,419,1,0,0,0,60,425,1,0,0,0,62,428,1,0,0,0,64,431,
		1,0,0,0,66,436,1,0,0,0,68,442,1,0,0,0,70,447,1,0,0,0,72,453,1,0,0,0,74,
		459,1,0,0,0,76,464,1,0,0,0,78,473,1,0,0,0,80,477,1,0,0,0,82,482,1,0,0,
		0,84,488,1,0,0,0,86,493,1,0,0,0,88,500,1,0,0,0,90,510,1,0,0,0,92,512,1,
		0,0,0,94,514,1,0,0,0,96,519,1,0,0,0,98,523,1,0,0,0,100,527,1,0,0,0,102,
		531,1,0,0,0,104,537,1,0,0,0,106,542,1,0,0,0,108,547,1,0,0,0,110,549,1,
		0,0,0,112,553,1,0,0,0,114,558,1,0,0,0,116,564,1,0,0,0,118,568,1,0,0,0,
		120,577,1,0,0,0,122,586,1,0,0,0,124,593,1,0,0,0,126,598,1,0,0,0,128,604,
		1,0,0,0,130,612,1,0,0,0,132,619,1,0,0,0,134,626,1,0,0,0,136,634,1,0,0,
		0,138,639,1,0,0,0,140,644,1,0,0,0,142,651,1,0,0,0,144,658,1,0,0,0,146,
		664,1,0,0,0,148,670,1,0,0,0,150,676,1,0,0,0,152,678,1,0,0,0,154,681,1,
		0,0,0,156,684,1,0,0,0,158,687,1,0,0,0,160,690,1,0,0,0,162,693,1,0,0,0,
		164,695,1,0,0,0,166,697,1,0,0,0,168,699,1,0,0,0,170,701,1,0,0,0,172,703,
		1,0,0,0,174,705,1,0,0,0,176,707,1,0,0,0,178,709,1,0,0,0,180,712,1,0,0,
		0,182,721,1,0,0,0,184,730,1,0,0,0,186,737,1,0,0,0,188,748,1,0,0,0,190,
		750,1,0,0,0,192,754,1,0,0,0,194,761,1,0,0,0,196,764,1,0,0,0,198,771,1,
		0,0,0,200,774,1,0,0,0,202,785,1,0,0,0,204,789,1,0,0,0,206,791,1,0,0,0,
		208,793,1,0,0,0,210,797,1,0,0,0,212,804,1,0,0,0,214,815,1,0,0,0,216,822,
		1,0,0,0,218,830,1,0,0,0,220,838,1,0,0,0,222,847,1,0,0,0,224,859,1,0,0,
		0,226,868,1,0,0,0,228,879,1,0,0,0,230,888,1,0,0,0,232,897,1,0,0,0,234,
		906,1,0,0,0,236,916,1,0,0,0,238,923,1,0,0,0,240,933,1,0,0,0,242,941,1,
		0,0,0,244,946,1,0,0,0,246,952,1,0,0,0,248,957,1,0,0,0,250,959,1,0,0,0,
		252,965,1,0,0,0,254,971,1,0,0,0,256,975,1,0,0,0,258,979,1,0,0,0,260,981,
		1,0,0,0,262,986,1,0,0,0,264,992,1,0,0,0,266,996,1,0,0,0,268,1001,1,0,0,
		0,270,1006,1,0,0,0,272,274,7,0,0,0,273,272,1,0,0,0,274,275,1,0,0,0,275,
		273,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,278,6,0,0,0,278,15,1,0,
		0,0,279,280,5,47,0,0,280,281,5,47,0,0,281,285,1,0,0,0,282,284,8,1,0,0,
		283,282,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,288,
		1,0,0,0,287,285,1,0,0,0,288,289,6,1,1,0,289,17,1,0,0,0,290,292,5,13,0,
		0,291,290,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,296,5,10,0,0,294,
		296,5,13,0,0,295,291,1,0,0,0,295,294,1,0,0,0,296,300,1,0,0,0,297,299,7,
		0,0,0,298,297,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,
		301,303,1,0,0,0,302,300,1,0,0,0,303,304,6,2,2,0,304,19,1,0,0,0,305,306,
		5,119,0,0,306,307,5,104,0,0,307,308,5,101,0,0,308,309,5,110,0,0,309,310,
		1,0,0,0,310,311,6,3,3,0,311,21,1,0,0,0,312,313,5,116,0,0,313,314,5,105,
		0,0,314,315,5,116,0,0,315,316,5,108,0,0,316,317,5,101,0,0,317,318,1,0,
		0,0,318,319,6,4,4,0,319,23,1,0,0,0,320,322,3,26,6,0,321,323,3,30,8,0,322,
		321,1,0,0,0,322,323,1,0,0,0,323,25,1,0,0,0,324,326,7,2,0,0,325,324,1,0,
		0,0,326,27,1,0,0,0,327,330,7,3,0,0,328,330,3,26,6,0,329,327,1,0,0,0,329,
		328,1,0,0,0,330,29,1,0,0,0,331,333,3,28,7,0,332,331,1,0,0,0,333,334,1,
		0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,31,1,0,0,0,336,337,5,45,0,0,
		337,338,5,45,0,0,338,339,5,45,0,0,339,340,1,0,0,0,340,341,6,9,5,0,341,
		33,1,0,0,0,342,344,3,14,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,345,1,
		0,0,0,345,347,5,58,0,0,346,348,3,14,0,0,347,346,1,0,0,0,347,348,1,0,0,
		0,348,349,1,0,0,0,349,350,6,10,6,0,350,35,1,0,0,0,351,352,5,35,0,0,352,
		353,1,0,0,0,353,354,6,11,7,0,354,37,1,0,0,0,355,357,3,14,0,0,356,355,1,
		0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,360,5,58,0,0,359,361,3,14,0,
		0,360,359,1,0,0,0,360,361,1,0,0,0,361,362,1,0,0,0,362,363,6,12,8,0,363,
		364,1,0,0,0,364,365,6,12,9,0,365,366,6,12,10,0,366,39,1,0,0,0,367,368,
		9,0,0,0,368,369,1,0,0,0,369,370,6,13,11,0,370,41,1,0,0,0,371,373,3,14,
		0,0,372,371,1,0,0,0,372,373,1,0,0,0,373,374,1,0,0,0,374,376,5,58,0,0,375,
		377,3,14,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,379,6,
		14,9,0,379,43,1,0,0,0,380,382,3,14,0,0,381,380,1,0,0,0,381,382,1,0,0,0,
		382,383,1,0,0,0,383,385,3,24,5,0,384,386,3,14,0,0,385,384,1,0,0,0,385,
		386,1,0,0,0,386,387,1,0,0,0,387,388,6,15,12,0,388,45,1,0,0,0,389,390,3,
		18,2,0,390,391,1,0,0,0,391,392,6,16,13,0,392,393,6,16,11,0,393,47,1,0,
		0,0,394,396,8,1,0,0,395,394,1,0,0,0,396,397,1,0,0,0,397,395,1,0,0,0,397,
		398,1,0,0,0,398,49,1,0,0,0,399,400,3,18,2,0,400,401,1,0,0,0,401,402,6,
		18,13,0,402,403,6,18,2,0,403,404,6,18,11,0,404,51,1,0,0,0,405,406,3,14,
		0,0,406,407,1,0,0,0,407,408,6,19,0,0,408,53,1,0,0,0,409,410,3,18,2,0,410,
		411,1,0,0,0,411,412,6,20,13,0,412,413,6,20,2,0,413,55,1,0,0,0,414,415,
		3,16,1,0,415,416,1,0,0,0,416,417,6,21,14,0,417,418,6,21,1,0,418,57,1,0,
		0,0,419,420,5,61,0,0,420,421,5,61,0,0,421,422,5,61,0,0,422,423,1,0,0,0,
		423,424,6,22,11,0,424,59,1,0,0,0,425,426,5,45,0,0,426,427,5,62,0,0,427,
		61,1,0,0,0,428,429,5,61,0,0,429,430,5,62,0,0,430,63,1,0,0,0,431,432,5,
		60,0,0,432,433,5,60,0,0,433,434,1,0,0,0,434,435,6,25,15,0,435,65,1,0,0,
		0,436,437,5,35,0,0,437,438,1,0,0,0,438,439,6,26,16,0,439,440,6,26,17,0,
		440,441,6,26,7,0,441,67,1,0,0,0,442,443,5,123,0,0,443,444,1,0,0,0,444,
		445,6,27,18,0,445,446,6,27,19,0,446,69,1,0,0,0,447,448,5,92,0,0,448,449,
		5,91,0,0,449,450,1,0,0,0,450,451,6,28,20,0,451,452,6,28,18,0,452,71,1,
		0,0,0,453,454,5,92,0,0,454,455,1,0,0,0,455,456,6,29,0,0,456,457,6,29,18,
		0,457,458,6,29,21,0,458,73,1,0,0,0,459,460,9,0,0,0,460,461,1,0,0,0,461,
		462,6,30,20,0,462,463,6,30,18,0,463,75,1,0,0,0,464,465,3,18,2,0,465,466,
		1,0,0,0,466,467,6,31,13,0,467,468,6,31,11,0,468,77,1,0,0,0,469,470,5,92,
		0,0,470,474,5,91,0,0,471,472,5,92,0,0,472,474,5,93,0,0,473,469,1,0,0,0,
		473,471,1,0,0,0,474,475,1,0,0,0,475,476,6,32,20,0,476,79,1,0,0,0,477,478,
		5,92,0,0,478,479,1,0,0,0,479,480,6,33,0,0,480,481,6,33,21,0,481,81,1,0,
		0,0,482,483,3,36,11,0,483,484,1,0,0,0,484,485,6,34,16,0,485,486,6,34,22,
		0,486,487,6,34,7,0,487,83,1,0,0,0,488,489,5,123,0,0,489,490,1,0,0,0,490,
		491,6,35,23,0,491,492,6,35,19,0,492,85,1,0,0,0,493,494,5,60,0,0,494,495,
		5,60,0,0,495,496,1,0,0,0,496,497,6,36,24,0,497,498,6,36,22,0,498,499,6,
		36,15,0,499,87,1,0,0,0,500,501,3,16,1,0,501,502,1,0,0,0,502,503,6,37,1,
		0,503,89,1,0,0,0,504,506,3,92,39,0,505,504,1,0,0,0,506,507,1,0,0,0,507,
		505,1,0,0,0,507,508,1,0,0,0,508,511,1,0,0,0,509,511,7,4,0,0,510,505,1,
		0,0,0,510,509,1,0,0,0,511,91,1,0,0,0,512,513,8,5,0,0,513,93,1,0,0,0,514,
		515,7,6,0,0,515,516,1,0,0,0,516,517,6,40,20,0,517,518,6,40,11,0,518,95,
		1,0,0,0,519,520,9,0,0,0,520,521,1,0,0,0,521,522,6,41,11,0,522,97,1,0,0,
		0,523,524,3,14,0,0,524,525,1,0,0,0,525,526,6,42,0,0,526,99,1,0,0,0,527,
		528,3,16,1,0,528,529,1,0,0,0,529,530,6,43,1,0,530,101,1,0,0,0,531,532,
		5,60,0,0,532,533,5,60,0,0,533,534,1,0,0,0,534,535,6,44,24,0,535,536,6,
		44,15,0,536,103,1,0,0,0,537,538,5,35,0,0,538,539,1,0,0,0,539,540,6,45,
		16,0,540,541,6,45,7,0,541,105,1,0,0,0,542,543,3,18,2,0,543,544,1,0,0,0,
		544,545,6,46,13,0,545,546,6,46,11,0,546,107,1,0,0,0,547,548,9,0,0,0,548,
		109,1,0,0,0,549,550,3,14,0,0,550,551,1,0,0,0,551,552,6,48,0,0,552,111,
		1,0,0,0,553,554,3,36,11,0,554,555,1,0,0,0,555,556,6,49,16,0,556,113,1,
		0,0,0,557,559,8,7,0,0,558,557,1,0,0,0,559,560,1,0,0,0,560,558,1,0,0,0,
		560,561,1,0,0,0,561,562,1,0,0,0,562,563,6,50,11,0,563,115,1,0,0,0,564,
		565,3,14,0,0,565,566,1,0,0,0,566,567,6,51,0,0,567,117,1,0,0,0,568,569,
		5,97,0,0,569,570,5,108,0,0,570,571,5,119,0,0,571,572,5,97,0,0,572,573,
		5,121,0,0,573,574,5,115,0,0,574,575,1,0,0,0,575,576,4,52,0,0,576,119,1,
		0,0,0,577,578,5,111,0,0,578,579,5,110,0,0,579,580,5,99,0,0,580,581,5,101,
		0,0,581,582,1,0,0,0,582,583,4,53,1,0,583,584,1,0,0,0,584,585,6,53,25,0,
		585,121,1,0,0,0,586,587,5,105,0,0,587,588,5,102,0,0,588,589,1,0,0,0,589,
		590,4,54,2,0,590,591,1,0,0,0,591,592,6,54,26,0,592,123,1,0,0,0,593,594,
		5,116,0,0,594,595,5,114,0,0,595,596,5,117,0,0,596,597,5,101,0,0,597,125,
		1,0,0,0,598,599,5,102,0,0,599,600,5,97,0,0,600,601,5,108,0,0,601,602,5,
		115,0,0,602,603,5,101,0,0,603,127,1,0,0,0,604,605,5,110,0,0,605,606,5,
		117,0,0,606,607,5,108,0,0,607,608,5,108,0,0,608,129,1,0,0,0,609,613,5,
		61,0,0,610,611,5,116,0,0,611,613,5,111,0,0,612,609,1,0,0,0,612,610,1,0,
		0,0,613,131,1,0,0,0,614,615,5,60,0,0,615,620,5,61,0,0,616,617,5,108,0,
		0,617,618,5,116,0,0,618,620,5,101,0,0,619,614,1,0,0,0,619,616,1,0,0,0,
		620,133,1,0,0,0,621,622,5,62,0,0,622,627,5,61,0,0,623,624,5,103,0,0,624,
		625,5,116,0,0,625,627,5,101,0,0,626,621,1,0,0,0,626,623,1,0,0,0,627,135,
		1,0,0,0,628,629,5,61,0,0,629,635,5,61,0,0,630,631,5,105,0,0,631,635,5,
		115,0,0,632,633,5,101,0,0,633,635,5,113,0,0,634,628,1,0,0,0,634,630,1,
		0,0,0,634,632,1,0,0,0,635,137,1,0,0,0,636,640,5,60,0,0,637,638,5,108,0,
		0,638,640,5,116,0,0,639,636,1,0,0,0,639,637,1,0,0,0,640,139,1,0,0,0,641,
		645,5,62,0,0,642,643,5,103,0,0,643,645,5,116,0,0,644,641,1,0,0,0,644,642,
		1,0,0,0,645,141,1,0,0,0,646,647,5,33,0,0,647,652,5,61,0,0,648,649,5,110,
		0,0,649,650,5,101,0,0,650,652,5,113,0,0,651,646,1,0,0,0,651,648,1,0,0,
		0,652,143,1,0,0,0,653,654,5,97,0,0,654,655,5,110,0,0,655,659,5,100,0,0,
		656,657,5,38,0,0,657,659,5,38,0,0,658,653,1,0,0,0,658,656,1,0,0,0,659,
		145,1,0,0,0,660,661,5,111,0,0,661,665,5,114,0,0,662,663,5,124,0,0,663,
		665,5,124,0,0,664,660,1,0,0,0,664,662,1,0,0,0,665,147,1,0,0,0,666,667,
		5,120,0,0,667,668,5,111,0,0,668,671,5,114,0,0,669,671,5,94,0,0,670,666,
		1,0,0,0,670,669,1,0,0,0,671,149,1,0,0,0,672,673,5,110,0,0,673,674,5,111,
		0,0,674,677,5,116,0,0,675,677,5,33,0,0,676,672,1,0,0,0,676,675,1,0,0,0,
		677,151,1,0,0,0,678,679,5,43,0,0,679,680,5,61,0,0,680,153,1,0,0,0,681,
		682,5,45,0,0,682,683,5,61,0,0,683,155,1,0,0,0,684,685,5,42,0,0,685,686,
		5,61,0,0,686,157,1,0,0,0,687,688,5,37,0,0,688,689,5,61,0,0,689,159,1,0,
		0,0,690,691,5,47,0,0,691,692,5,61,0,0,692,161,1,0,0,0,693,694,5,43,0,0,
		694,163,1,0,0,0,695,696,5,45,0,0,696,165,1,0,0,0,697,698,5,42,0,0,698,
		167,1,0,0,0,699,700,5,47,0,0,700,169,1,0,0,0,701,702,5,37,0,0,702,171,
		1,0,0,0,703,704,5,40,0,0,704,173,1,0,0,0,705,706,5,41,0,0,706,175,1,0,
		0,0,707,708,5,44,0,0,708,177,1,0,0,0,709,710,5,97,0,0,710,711,5,115,0,
		0,711,179,1,0,0,0,712,713,5,115,0,0,713,714,5,116,0,0,714,715,5,114,0,
		0,715,716,5,105,0,0,716,717,5,110,0,0,717,718,5,103,0,0,718,719,1,0,0,
		0,719,720,6,83,27,0,720,181,1,0,0,0,721,722,5,110,0,0,722,723,5,117,0,
		0,723,724,5,109,0,0,724,725,5,98,0,0,725,726,5,101,0,0,726,727,5,114,0,
		0,727,728,1,0,0,0,728,729,6,84,27,0,729,183,1,0,0,0,730,731,5,98,0,0,731,
		732,5,111,0,0,732,733,5,111,0,0,733,734,5,108,0,0,734,735,1,0,0,0,735,
		736,6,85,27,0,736,185,1,0,0,0,737,743,5,34,0,0,738,742,8,8,0,0,739,740,
		5,92,0,0,740,742,7,9,0,0,741,738,1,0,0,0,741,739,1,0,0,0,742,745,1,0,0,
		0,743,741,1,0,0,0,743,744,1,0,0,0,744,746,1,0,0,0,745,743,1,0,0,0,746,
		747,5,34,0,0,747,187,1,0,0,0,748,749,3,24,5,0,749,189,1,0,0,0,750,751,
		5,125,0,0,751,752,1,0,0,0,752,753,6,88,11,0,753,191,1,0,0,0,754,755,5,
		62,0,0,755,756,5,62,0,0,756,757,1,0,0,0,757,758,6,89,28,0,758,759,6,89,
		11,0,759,760,6,89,11,0,760,193,1,0,0,0,761,762,5,36,0,0,762,763,3,24,5,
		0,763,195,1,0,0,0,764,765,5,46,0,0,765,197,1,0,0,0,766,772,3,202,94,0,
		767,768,3,202,94,0,768,769,5,46,0,0,769,770,3,202,94,0,770,772,1,0,0,0,
		771,766,1,0,0,0,771,767,1,0,0,0,772,199,1,0,0,0,773,775,7,1,0,0,774,773,
		1,0,0,0,775,776,1,0,0,0,776,774,1,0,0,0,776,777,1,0,0,0,777,778,1,0,0,
		0,778,779,4,93,3,0,779,780,6,93,29,0,780,781,1,0,0,0,781,782,6,93,13,0,
		782,783,6,93,11,0,783,201,1,0,0,0,784,786,3,204,95,0,785,784,1,0,0,0,786,
		787,1,0,0,0,787,785,1,0,0,0,787,788,1,0,0,0,788,203,1,0,0,0,789,790,7,
		10,0,0,790,205,1,0,0,0,791,792,3,18,2,0,792,207,1,0,0,0,793,794,3,14,0,
		0,794,795,1,0,0,0,795,796,6,97,0,0,796,209,1,0,0,0,797,798,5,105,0,0,798,
		799,5,102,0,0,799,800,1,0,0,0,800,801,4,98,4,0,801,802,1,0,0,0,802,803,
		6,98,19,0,803,211,1,0,0,0,804,805,5,101,0,0,805,806,5,108,0,0,806,807,
		5,115,0,0,807,808,5,101,0,0,808,809,5,105,0,0,809,810,5,102,0,0,810,811,
		1,0,0,0,811,812,4,99,5,0,812,813,1,0,0,0,813,814,6,99,19,0,814,213,1,0,
		0,0,815,816,5,101,0,0,816,817,5,108,0,0,817,818,5,115,0,0,818,819,5,101,
		0,0,819,820,1,0,0,0,820,821,4,100,6,0,821,215,1,0,0,0,822,823,5,115,0,
		0,823,824,5,101,0,0,824,825,5,116,0,0,825,826,1,0,0,0,826,827,4,101,7,
		0,827,828,1,0,0,0,828,829,6,101,19,0,829,217,1,0,0,0,830,831,5,101,0,0,
		831,832,5,110,0,0,832,833,5,100,0,0,833,834,5,105,0,0,834,835,5,102,0,
		0,835,836,1,0,0,0,836,837,4,102,8,0,837,219,1,0,0,0,838,839,5,99,0,0,839,
		840,5,97,0,0,840,841,5,108,0,0,841,842,5,108,0,0,842,843,1,0,0,0,843,844,
		4,103,9,0,844,845,1,0,0,0,845,846,6,103,19,0,846,221,1,0,0,0,847,848,5,
		100,0,0,848,849,5,101,0,0,849,850,5,99,0,0,850,851,5,108,0,0,851,852,5,
		97,0,0,852,853,5,114,0,0,853,854,5,101,0,0,854,855,1,0,0,0,855,856,4,104,
		10,0,856,857,1,0,0,0,857,858,6,104,19,0,858,223,1,0,0,0,859,860,5,106,
		0,0,860,861,5,117,0,0,861,862,5,109,0,0,862,863,5,112,0,0,863,864,1,0,
		0,0,864,865,4,105,11,0,865,866,1,0,0,0,866,867,6,105,30,0,867,225,1,0,
		0,0,868,869,5,100,0,0,869,870,5,101,0,0,870,871,5,116,0,0,871,872,5,111,
		0,0,872,873,5,117,0,0,873,874,5,114,0,0,874,875,1,0,0,0,875,876,4,106,
		12,0,876,877,1,0,0,0,877,878,6,106,30,0,878,227,1,0,0,0,879,880,5,114,
		0,0,880,881,5,101,0,0,881,882,5,116,0,0,882,883,5,117,0,0,883,884,5,114,
		0,0,884,885,5,110,0,0,885,886,1,0,0,0,886,887,4,107,13,0,887,229,1,0,0,
		0,888,889,5,101,0,0,889,890,5,110,0,0,890,891,5,117,0,0,891,892,5,109,
		0,0,892,893,1,0,0,0,893,894,4,108,14,0,894,895,1,0,0,0,895,896,6,108,31,
		0,896,231,1,0,0,0,897,898,5,99,0,0,898,899,5,97,0,0,899,900,5,115,0,0,
		900,901,5,101,0,0,901,902,1,0,0,0,902,903,4,109,15,0,903,904,1,0,0,0,904,
		905,6,109,19,0,905,233,1,0,0,0,906,907,5,101,0,0,907,908,5,110,0,0,908,
		909,5,100,0,0,909,910,5,101,0,0,910,911,5,110,0,0,911,912,5,117,0,0,912,
		913,5,109,0,0,913,914,1,0,0,0,914,915,4,110,16,0,915,235,1,0,0,0,916,917,
		5,111,0,0,917,918,5,110,0,0,918,919,5,99,0,0,919,920,5,101,0,0,920,921,
		1,0,0,0,921,922,4,111,17,0,922,237,1,0,0,0,923,924,5,101,0,0,924,925,5,
		110,0,0,925,926,5,100,0,0,926,927,5,111,0,0,927,928,5,110,0,0,928,929,
		5,99,0,0,929,930,5,101,0,0,930,931,1,0,0,0,931,932,4,112,18,0,932,239,
		1,0,0,0,933,934,5,108,0,0,934,935,5,111,0,0,935,936,5,99,0,0,936,937,5,
		97,0,0,937,938,5,108,0,0,938,939,1,0,0,0,939,940,4,113,19,0,940,241,1,
		0,0,0,941,942,5,62,0,0,942,943,5,62,0,0,943,944,1,0,0,0,944,945,6,114,
		11,0,945,243,1,0,0,0,946,947,5,123,0,0,947,948,1,0,0,0,948,949,6,115,23,
		0,949,950,6,115,32,0,950,951,6,115,19,0,951,245,1,0,0,0,952,953,9,0,0,
		0,953,954,1,0,0,0,954,955,6,116,33,0,955,956,6,116,32,0,956,247,1,0,0,
		0,957,958,3,18,2,0,958,249,1,0,0,0,959,960,5,62,0,0,960,961,5,62,0,0,961,
		962,1,0,0,0,962,963,6,118,28,0,963,964,6,118,11,0,964,251,1,0,0,0,965,
		966,5,123,0,0,966,967,1,0,0,0,967,968,6,119,23,0,968,969,6,119,19,0,969,
		253,1,0,0,0,970,972,8,11,0,0,971,970,1,0,0,0,972,973,1,0,0,0,973,971,1,
		0,0,0,973,974,1,0,0,0,974,255,1,0,0,0,975,976,3,14,0,0,976,977,1,0,0,0,
		977,978,6,121,0,0,978,257,1,0,0,0,979,980,3,18,2,0,980,259,1,0,0,0,981,
		982,3,24,5,0,982,983,1,0,0,0,983,984,6,123,12,0,984,985,6,123,11,0,985,
		261,1,0,0,0,986,987,5,62,0,0,987,988,5,62,0,0,988,989,1,0,0,0,989,990,
		6,124,28,0,990,991,6,124,11,0,991,263,1,0,0,0,992,993,3,14,0,0,993,994,
		1,0,0,0,994,995,6,125,0,0,995,265,1,0,0,0,996,997,3,24,5,0,997,998,1,0,
		0,0,998,999,6,126,12,0,999,1000,6,126,11,0,1000,267,1,0,0,0,1001,1002,
		3,68,27,0,1002,1003,1,0,0,0,1003,1004,6,127,23,0,1004,1005,6,127,10,0,
		1005,269,1,0,0,0,1006,1007,5,62,0,0,1007,1008,5,62,0,0,1008,1009,1,0,0,
		0,1009,1010,6,128,28,0,1010,1011,6,128,11,0,1011,271,1,0,0,0,53,0,1,2,
		3,4,5,6,7,8,9,10,11,12,13,275,285,291,295,300,322,325,329,334,343,347,
		356,360,372,376,381,385,397,473,507,510,560,612,619,626,634,639,644,651,
		658,664,670,676,741,743,771,776,787,973,34,0,1,0,0,3,0,0,2,0,5,1,0,5,2,
		0,5,4,0,5,3,0,5,8,0,1,12,0,7,11,0,2,9,0,4,0,0,7,9,0,7,6,0,7,5,0,5,10,0,
		7,12,0,5,7,0,5,5,0,5,9,0,7,24,0,5,6,0,2,7,0,7,20,0,7,19,0,7,82,0,7,69,
		0,7,62,0,7,85,0,1,93,1,5,13,0,5,12,0,2,11,0,7,87,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Yarn.Compiler
